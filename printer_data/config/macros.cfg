#####################################################################
#   Print_start macro for v2
#####################################################################
[gcode_macro PRINT_START]
# Source https://github.com/jontek2/A-better-print_start-macro
# Unified startup sequence for high-speed printing — includes slicer temp logic, QGL, chamber soak, mesh leveling, and purge

gcode:
    {% set target_bed       = params.BED|int %}                                   ; Bed temperature target from slicer
    {% set target_extruder  = params.EXTRUDER|int %}                              ; Extruder temperature target from slicer
    {% set target_chamber   = params.CHAMBER|default("45")|int %}                 ; Chamber temperature target or default
    {% set x_wait           = printer.toolhead.axis_maximum.x|float / 2 %}        ; Halfway X axis limit for wait calculations
    {% set y_wait           = printer.toolhead.axis_maximum.y|float / 2 %}        ; Halfway Y axis limit for wait calculations
    {% set FILAMENT_PROFILE = params.FILAMENT_PROFILE|default('none')|string %}   ; Filament profile from slicer or default none
    {% set BED_TYPE         = params.BED_TYPE|default('unknown')|string %}        ; Bed type profile from slicer or default unknown
    {% set bed_start_wait   = (target_bed * 0.8)|round(0, 'floor') %}             ; 80% of target bed temp


    # ─── Filament and Bed Profile Logging ─────────────────────
    RESPOND MSG="Filament Type: {FILAMENT_PROFILE}"                              ; Log filament profile to console

    # Uncomment this block to add per-material announcements
    # {% if FILAMENT_PROFILE == 'PLA' %}
    #     {action_respond_info("PLA")}
    # {% elif FILAMENT_PROFILE == 'PETG' %}
    #     {action_respond_info("PETG")}
    # {% elif FILAMENT_PROFILE == 'ASA' %}
    #     {action_respond_info("ASA")}
    # {% elif FILAMENT_PROFILE == 'ABS' %}
    #     {action_respond_info("ABS")}
    # {% elif FILAMENT_PROFILE == 'TPU' %}
    #     {action_respond_info("TPU")}
    # {% endif %}

    RESPOND MSG="Bed Type: {BED_TYPE}"                                           ; Log bed type profile to console

    # Use the BED_TYPE value for additional actions
    # {% if BED_TYPE == 'High Temp Plate' %}
    #     {action_respond_info("High Temp Plate Z-Offset selected")}
    # {% elif BED_TYPE == 'Textured PEI Plate' %}
    #     {action_respond_info("Textured PEI Plate Z-Offset selected")}
    # {% else %}
    #     {action_respond_info("Unknown bed type")}
    # {% endif %}

    # {action_emergency_stop("Impending Doom Averted!")}
    LIGHT_100
    # ─── Z offset and homing ─────────────────────────────────
    SET_GCODE_OFFSET Z=0                                                          ; Reset Z offset
    SET_DISPLAY_TEXT MSG="Initial Homing"                                         ; Display info on screen
    STATUS_HOMING                                                                 ; Set LEDs to homing mode
    G28                                                                           ; Home all axes
    G90                                                                           ; Absolute positioning

    # ─── Bed heat background + 80% wait ─────────────────────
    SET_DISPLAY_TEXT MSG="Bed heating to {target_bed}°C (waiting to {bed_start_wait}°C)" ; Display bed heat message
    M140 S{target_bed}                                                            ; Start bed heating in background
    G1 Z15 F1500                                                                  ; Raise Z 15mm for safe moves
    G1 X150 Y150 F9000                                                            ; Move to bed center
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_start_wait}                   ; Wait until bed ≥ 80% target

    # ─── Chamber soak if high-temp material ─────────────────
    {% if target_bed > 90 %}
        SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}°C"                       ; Display chamber heat soak target
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber} ; Wait for chamber temp
    {% endif %}

    # ─── Hotend preheat for Z homing ────────────────────────
    SET_DISPLAY_TEXT MSG="Hotend: 150°C"                                          ; Display hotend preheat
    M109 S150                                                                    ; Heat hotend to 150°C and wait

    # ─── Quad gantry leveling and Z rehome ─────────────────
    SET_DISPLAY_TEXT MSG="Leveling"                                               ; Display leveling message
    STATUS_LEVELING                                                               ; Set LEDs to leveling mode
    QUAD_GANTRY_LEVEL                                                             ; Perform quad gantry level

    # ─── Bed mesh calibration ─────────────────────────────
    SET_DISPLAY_TEXT MSG="Bed mesh"                                              ; Display bed mesh message
    STATUS_MESHING                                                               ; Set LEDs to mesh mode
    BED_MESH_CALIBRATE                                                           ; Start bed mesh calibration

    CARTOGRAPHER_TOUCH                                                           ; Calibrate Z offset with hot nozzle
    G1 Z10 F1500

    # ─── Final heat and line purge ─────────────────────────
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}°C"                            ; Display hotend target
    STATUS_HEATING                                                               ; Set LEDs to heating mode
    M107                                                                         ; Turn off part cooling fan
    M109 S{target_extruder}                                                      ; Heat hotend to target

    # ─── Nozzle wipe sequence ─────────────────────────────
    SET_DISPLAY_TEXT MSG="Wiping"                                                 ; Display wipe message
    G90                                                                           ; Absolute positioning
    G1 Z10 F1200                                                                  ; Lift nozzle off bed
    G1 X85 Y305 F15000                                                            ; Move near wiper
    G1 Z4 F1200                                                                   ; Lower nozzle onto wiper

    G91                                                                           ; Relative mode
    G1 X45 F15000                                                                 ; Snake wipe pattern
    G1 X-45
    G1 X45
    G1 X-45
    G1 X45
    G1 X-45
    G1 X45
    G1 X-45
    G1 X45
    G1 X-45
    G90                                                                           ; Return to absolute mode
    G1 Z10 F1500                                                                  ; Lift nozzle again
    #G28 Z                                                                         ; Final Z home - not need for cartographe

    SET_DISPLAY_TEXT MSG="Printer goes brr"                                      ; Display printing message
    STATUS_PRINTING                                                             ; Set LEDs to printing mode
    LINE_PURGE                                                                   ; Run purge routine
    SKEW_PROFILE LOAD=Califlower

#####################################################################
#   Print_End macro for v2
#####################################################################
[gcode_macro PRINT_END]
# Unified print shutdown routine — combines chamber cooldown, safe retraction,
# user prompt for bed, and toolhead parking with motion state preservation.
gcode:

    # ─── Calculate Safe Positions ──────────────────────────────
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
     # ─── Raise Z and Save State ───────────────────────────────
    G91
    G1 Z50 F1500                                                     ; Raise Z safely before saving state
    G90
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    # ─── Bed Cooldown Trigger ────────────────────────────────
    #UPDATE_DELAYED_GCODE ID=bedfan_cooldown DURATION=5            ; Start bedfan cooldown loop

    # ─── Extruder Shutdown ────────────────────────────────────
    M400                                                          ; Wait for buffer to clear
    G92 E0                                                        ; Zero extruder position
    G1 E-15.0 F3600                                               ; Retract filament
     # ─── String Cleanup Move ─────────────────────────────────
    G91                                                           ; Relative positioning
    G0 X20.0 Y20.0 F20000                                         ; Small move to reduce stringing
    G90                                                           ; Absolute positioning
    # ─── Turn Off Heaters and Fans ──────────────────────────
    M104 S0                                                       ; Turn off hotend heater
    M107                                                         ; Turn off part cooling fan
    TURN_OFF_HEATERS
   # ─── Clear Mesh and Restore State ───────────────────────
    BED_MESH_CLEAR                                               ; Clear bed mesh data
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0             ; Restore motion state without moving
    LIGHT_OFF
    SET_SKEW CLEAR=1

##################################################
#                 -- QUAD_GANTRY_LEVEL --                  #
##################################################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
        {% if printer.quad_gantry_level.applied == False %}                   ; If QGL is not applied, first run a coarse calibration
            _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1.0
        {% endif %}
        _FINE_QUAD_GANTRY_LEVEL                                               ; Then perform fine QGL down to desired spec (separate macro call needed)


[gcode_macro _FINE_QUAD_GANTRY_LEVEL]
gcode:
        {% if printer.quad_gantry_level.applied == True %}                   ; Go for full quality at reduced probing height
            _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=4.0                        ; Adjust this value as needed for Cartographer
        {% else %}
            {action_respond_info("Fine QGL called without calling coarse QGL first!")}   ; Warn if fine called without coarse first
            _QUAD_GANTRY_LEVEL                                                ; Perform full calibration using defaults
        {% endif %}

##################################################
#            -- BED_PARK --               #
##################################################
[gcode_macro BED_TIMEOUT_FLAG]
variable_aborted: 1                                                                                 ; Initialize abort flag
gcode:
    ; Dummy placeholder for timeout flag

[delayed_gcode bed_timeout]
gcode:
    {% if bed_timeout_flag.aborted == 1 %}
        M140 S0                                                                                  ; Turn off bed heater after timeout
        RESPOND PREFIX="info" MSG="⚠️ No input received — bed heater turned off automatically."  ; Inform user
        M117 🛑 Bed auto-off after timeout                                                    ; Display message on screen
    {% endif %}

[delayed_gcode bedpark_60_timeout]
gcode:
    M140 S0                                                               ; Turn off bed heater after timeout
    RESPOND PREFIX="info" MSG="⚠️ Bed park timed out — bed heater turned off." ; Notify user

[gcode_macro BED_PARK_60]
gcode:
    SET_GCODE_VARIABLE MACRO=BED_TIMEOUT_FLAG VARIABLE=aborted VALUE=0    ; Cancel any park-timeout flag
    M140 S60                                                              ; Park bed at 60 °C
    RESPOND PREFIX="info" MSG="✅ Bed parked at 60 °C for up to 1 hour."   ; Inform user
    UPDATE_DELAYED_GCODE ID=bedpark_60_timeout DURATION=3600              ; Auto-off after 1 h

[gcode_macro BED_OFF]
gcode:
    SET_GCODE_VARIABLE MACRO=BED_TIMEOUT_FLAG VARIABLE=aborted VALUE=0    ; Cancel park-timeout
    UPDATE_DELAYED_GCODE ID=bedpark_60_timeout DURATION=0                  ; Cancel 1 h auto-off
    M140 S0                                                               ; Turn off bed heater
    RESPOND PREFIX="info" MSG="🛑 Bed heater turned off."                 ; Inform user

[gcode_macro BED_HOLD_CURRENT]
gcode:
    SET_GCODE_VARIABLE MACRO=BED_TIMEOUT_FLAG VARIABLE=aborted VALUE=0    ; Cancel park-timeout
    UPDATE_DELAYED_GCODE ID=bedpark_60_timeout DURATION=0                  ; Cancel 1 h auto-off
    RESPOND PREFIX="info" MSG="♻️ Holding bed at current temperature."     ; Inform user
    M117 ♻️ Bed holding current target
##################################################
#               -- INPUT SHAPER --               #
##################################################
[gcode_macro xy_belt_tune]
gcode:
  _CG32
  BELT_SET
  G1 X150 Y115 F3000

[gcode_macro Z_belt_tune]
gcode:
  _CG32
  BELT_SET
  G1 Z175 F1500

[gcode_macro belt_tune]
gcode:
  _CG32
  BELT_SET
  COMPARE_BELTS_RESPONSES

[gcode_macro inputshaper_tune]
gcode:
  _CG32
  BELT_SET
  AXES_SHAPER_CALIBRATION

[gcode_macro vibrations_tune]
gcode:
  _CG32
  BELT_SET
  CREATE_VIBRATIONS_PROFILE

[gcode_macro center]
gcode:
  _CG32
  G1 Z10 F1500
  G1 X150 Y150 F9000

[gcode_macro EXCITATE_AXIS_AT_FREQQ]
description: Maintain a specified input shaper excitating frequency for some time to diagnose vibrations
gcode:
    {% set FREQUENCY = params.FREQUENCY|default(25)|int %}
    {% set TIME = params.TIME|default(10)|int %}
    {% set AXIS = params.AXIS|default("x")|string|lower %}

    TEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}
    M400

[gcode_macro SET_CURRENT_AND_TEST_TMC]
description: "Set run_current on X/Y, r un TEST_SPEED, dump + parse TMC status"
variable_current: 0
gcode:
    {% set current = params.CURRENT|default(1.4)|float %}

    # ─── Set run_current only ───────────────────────────────
    RESPOND MSG="Setting run_current = {current} A on X and Y" ; Announce current
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current}       ; Set X current
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current}       ; Set Y current

    # ─── Pre-Test Diagnostics ───────────────────────────────
    RESPOND MSG="─── Pre-Test TMC Dump ───"                   ; Pre-test dump start
    DUMP_TMC STEPPER=stepper_x                                 ; Dump X TMC status
    DUMP_TMC STEPPER=stepper_y                                 ; Dump Y TMC status

    # ─── Run the Movement Test ──────────────────────────────
    RESPOND MSG="Running TEST_SPEED ACCEL=10000"              ; Announce test start
    TEST_SPEED ACCEL=10000                                     ; Run test

    # ─── Wait for Post-Load Read ────────────────────────────
    G4 P2000                                                  ; Wait 2 seconds

    # ─── Post-Test Diagnostics ──────────────────────────────
    RESPOND MSG="─── Post-Test TMC Dump ───"                  ; Post-test dump start
    DUMP_TMC STEPPER=stepper_x                                 ; Dump X TMC status
    DUMP_TMC STEPPER=stepper_y                                 ; Dump Y TMC status

[gcode_macro BELT_SET]
gcode:
    _CG32
    G1 X150 Y150 F15000
 # ─── Large Pattern Diagonals ─────────────────────────
    G0 X0   Y0   F20000                                   ; Start at front-left
    G0 X300 Y300 F20000                                  ; Move to back-right
    G0 X0   Y0   F20000                                  ; Return to front-left
    G0 X300 Y0   F20000                                  ; Move to front-right
    G0 X0   Y300 F20000                                  ; Move to back-left
    G0 X300 Y0   F20000                                  ; Return to front-right

    # ─── Large Pattern Box ───────────────────────────────
    G0 X0   Y0   F20000                                   ; Front-left corner
    G0 X0   Y300 F20000                                  ; Back-left corner
    G0 X300 Y300 F20000                                 ; Back-right corner
    G0 X300 Y0   F20000                                  ; Front-right corner

    # ─── Small Pattern Diagonals ──────────────────────────
    G0 X140 Y140 F20000                                  ; Small box front-left
    G0 X160 Y160 F20000                                  ; Small box back-right
    G0 X140 Y160 F20000                                  ; Small box back-left
    G0 X160 Y140 F20000                                  ; Small box front-right

    # ─── Small Pattern Box ────────────────────────────────
    G0 X140 Y140 F20000                                  ; Small box front-left
    G0 X140 Y160 F20000                                  ; Small box back-left
    G0 X160 Y160 F20000                                  ; Small box back-right
    G0 X160 Y140 F20000                                  ; Small box front-right
    G1 X150 Y150 F20000


##################################################
#             -- CHAMBER LIGHTING --             #
##################################################
[gcode_macro LIGHT_100]
description: Set case light to 100% brightness
gcode:
  SET_PIN PIN=caselight VALUE=1.0

[gcode_macro LIGHT_75]
description: Set case light to 75% brightness
gcode:
  SET_PIN PIN=caselight VALUE=0.75

[gcode_macro LIGHT_50]
description: Set case light to 50% brightness
gcode:
  SET_PIN PIN=caselight VALUE=0.5

[gcode_macro LIGHT_25]
description: Set case light to 25% brightness
gcode:
  SET_PIN PIN=caselight VALUE=0.25

[gcode_macro LIGHT_OFF]
description: Turn off case light
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  
##################################################
#                -- Calibration --               #
##################################################
#Calibration/Tuning
[gcode_macro autotune_all]
gcode:
  AUTOTUNE_TMC STEPPER=stepper_x
  AUTOTUNE_TMC STEPPER=stepper_y
  AUTOTUNE_TMC STEPPER=stepper_z
  AUTOTUNE_TMC STEPPER=stepper_z1
  AUTOTUNE_TMC STEPPER=stepper_z2
  AUTOTUNE_TMC STEPPER=stepper_z3

[gcode_macro tune_pid_hotend]
gcode:
  M106 S64 #hotend fan 25%
  PID_CALIBRATE HEATER=extruder TARGET=245

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 15.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro PARK_EXTRUDER]
description: Park the extruder at the nozzle wiper position
gcode:
  G90                         ; Set to absolute positioning mode
  G1 X80 Y305 Z10     ; Move the extruder to the nozzle wiper position (adjust coordinates if needed)
  SET_DISPLAY_TEXT MSG="Extruder Parked"   ; Display message on screen
  
[gcode_macro G32] # Home all axis and QGL
gcode:
        SET_DISPLAY_TEXT MSG="Homing..."             # Display info on display
        STATUS_HOMING                                         # Set LEDs to homing-mode
        G28                                                   # Full home (XYZ)
        G90                                                   # Absolute position
        SET_DISPLAY_TEXT MSG="Leveling..."                      # Display info on display
        STATUS_LEVELING                                      # Set LEDs to leveling-mode
        QUAD_GANTRY_LEVEL
        G28 Z

  
[gcode_macro _CG32] # Homing + Leveling only if necessary
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        SET_DISPLAY_TEXT MSG="Conditional Homing..."                   # Display info on display
        STATUS_HOMING                                         # Set LEDs to homing-mode
        G28                                                   # Full home (XYZ)
        G90                                                   # Absolute position
        SET_DISPLAY_TEXT MSG="Leveling..."                      # Display info on display
        STATUS_LEVELING                                      # Set LEDs to leveling-mode
        QUAD_GANTRY_LEVEL
    {% endif %}

[delayed_gcode clear_display]
gcode:
  M117






[gcode_macro SCRUBBLER] - #heats nozzle before wipe then levels and QGL
gcode:
#Hot Homing and Leveling, set absolute positioning and update the Stealthburner LEDs.
        SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
        _CG32
 #Nozzle Wipe and home Z after QGL
        SET_DISPLAY_TEXT MSG="Wiping"
        G90 ; Absolute coordinates.  
        G1 Z10 F1200 ; Make sure we don't hit the bed during wiping passes
        G1 X85 Y305 F30000; start position, should be very close to where steel plate rub seq. ended
        G1 Z4 F1200; lower onto wiper
        M83 ; Relative extruder mode.
        G91 ; relative mode
        G1 X45 F15000  ; run snake pattern from top back to front, run at max accell.
        G1 X-45  
        G1 X45 
        G1 X-45
        G1 X45 
        G1 X-45
        G1 X45 
        G1 X-45
        G1 X45 
        G1 X-45
        G90 ; restore to absolute mode
        G0 Z10 F1200 ; Make sure we don't hit the bed during wiping passes
        G0 X150 Y150 F9000 ; Move to center
        G28 Z                     ; Home the Z now that nozzle is clean


## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84

[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E25 F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  50
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E-50 F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state



##Replace M109 (wait for hotend temperature) and M190 (wait for bed temperature) with TEMPERATURE_WAIT.
#This just makes Klipper resume immediately after reaching temp. Otherwise it waits for the temperature to stabilize.

[gcode_macro M109] #(wait for hotend temperature)
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro M190] # (wait for bed temperature) 
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}



#It’s just handy to have a shortcut to turn off everything at once!
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    SET_PIN PIN=caselight VALUE=0       ; turn case light off
##########################################
#   Bed Fan Control & Chamber Cooldown   #
##########################################

################# Config Options ##################

[gcode_macro _BEDFANVARS]
# Fan behavior configuration for bed heater logic
variable_threshold: 90        # Bed temp threshold (¬∞C) to enable bed fans
variable_fast: 0.6            # Fan speed once bed is at target temp (unless chamber too hot)
variable_slow: 0.2            # Fan speed while bed is still heating
gcode:

################## Fan Definition ##################

[fan_generic BedFans]
pin: PF9                     # Replace with your actual fan output pin if needed
#cycle_time: 0.05           # Optional for software PWM (not needed for hardware PWM)
kick_start_time: 0.5         # Helps ensure fan starts spinning at low speeds

################## Fan Speed Aliases ##################

[gcode_macro BEDFANSSLOW]
# Set bed fan to slow speed (preheat phase or chamber cooling stage 3)
gcode:
    {% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
    SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
# Set bed fan to fast speed (bed at temp, chamber < 60¬∞C)
gcode:
    {% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
    SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
# Turn bed fan off
gcode:
    SET_FAN_SPEED FAN=BedFans SPEED=0

################### Command Overrides ###################

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
# Override to embed fan logic when setting bed temperature
gcode:
    {% set HEATER = params.HEATER|default("None") %}
    {% set TARGET = params.TARGET|default(0)|int %}
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

    # Route to correct heater control
    {% if HEATER|lower == "extruder" %}
        M104 S{TARGET}
    {% elif HEATER|lower == "heater_bed" %}
        M99140 S{TARGET}
    {% else %}
        {action_respond_info("Heater %s not supported" % HEATER)}
    {% endif %}

    # Fan control only applies for bed heater
    {% if HEATER|lower == "heater_bed" %}
        {% if TARGET >= THRESHOLD %}
            BEDFANSSLOW
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
        {% else %}
            BEDFANSOFF
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0  # Cancel loop if not needed
        {% endif %}
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
# Wait for bed to reach temp with fan integration
gcode:
    {% set S = params.S|int %}
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

    # Pre-heat fan behavior
    {% if S >= THRESHOLD %}
        BEDFANSSLOW                     # Slow fan during preheat
    {% else %}
        BEDFANSOFF                      # No fan if under threshold
    {% endif %}

    # Pass through to actual bed set command
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    # Wait until within 5¬∞C window (avoids PID settle delay)
    {% if S != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S} MAXIMUM={S + 5}
    {% endif %}

    # Post-heating behavior
    {% if S >= THRESHOLD %}
        BEDFANSFAST
    {% endif %}

[gcode_macro M140]
rename_existing: M99140
# Replace standard M140 with fan-aware version
gcode:
    {% set S = params.S|float %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
# Also turn off bed fan when heaters are disabled
gcode:
    BEDFANSOFF
    _TURN_OFF_HEATERS

################ Bed Heat Monitoring Loop ################

[delayed_gcode bedfanloop]
# Runs while bed is heating to manage fan based on chamber temp
# - Starts if bed target ‚â• threshold
# - Reverts to slow fan if chamber exceeds 60‚ÄØ¬∞C
# - Uses 5s polling interval
gcode:
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    {% set CHAMBER_TEMP = printer["temperature_sensor chamber"].temperature|float %}

    {% if printer.heater_bed.target >= THRESHOLD %}
        {% if CHAMBER_TEMP > 70 %}
            BEDFANSSLOW
           RESPOND PREFIX="debug" MSG="‚ôªÔ∏è Chamber temp >60¬∞C ‚Äî reverting fans to slow"
        {% elif printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
            BEDFANSFAST
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
        {% else %}
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
        {% endif %}
    {% endif %}

################ Chamber Cooldown Loop ################

[delayed_gcode bedfan_cooldown]
# Post-print chamber cooldown based on current chamber temperature
# Triggered manually in PRINT_END macro if filament type is in the allowed list
# Cooling fan stages:
# - >50¬∞C    = fast (0.6)
# - 47‚Äì50¬∞C  = medium (0.4)
# - 40‚Äì47¬∞C  = slow (0.2)
# - ‚â§40¬∞C    = fan off
gcode:
    {% set chamber_temp = printer["temperature_sensor chamber"].temperature|float %}
    {% set material = printer["gcode_macro SET_FILAMENT_TYPE"].type|upper %}
    {% set allowed = printer["gcode_macro _COOLDOWNVARS"].materials.upper().split(",") %}

    {% if material in allowed %}
        {% if chamber_temp > 50 %}
            SET_FAN_SPEED FAN=BedFans SPEED=0.6
            RESPOND PREFIX="info" MSG="üå¨Ô∏è Cooling chamber (fast) ‚Äî {chamber_temp|round(1)}¬∞C"
            UPDATE_DELAYED_GCODE ID=bedfan_cooldown DURATION=30
        {% elif chamber_temp > 47 %}
            SET_FAN_SPEED FAN=BedFans SPEED=0.4
            RESPOND PREFIX="info" MSG="üå¨Ô∏è Cooling chamber (medium) ‚Äî {chamber_temp|round(1)}¬∞C"
            UPDATE_DELAYED_GCODE ID=bedfan_cooldown DURATION=30
        {% elif chamber_temp > 40 %}
            SET_FAN_SPEED FAN=BedFans SPEED=0.2
            RESPOND PREFIX="info" MSG="üå¨Ô∏è Cooling chamber (slow) ‚Äî {chamber_temp|round(1)}¬∞C"
            UPDATE_DELAYED_GCODE ID=bedfan_cooldown DURATION=30
        {% else %}
            BEDFANSOFF
            RESPOND PREFIX="info" MSG="‚úÖ Chamber cooled below 40¬∞C, fans off."
        {% endif %}
    {% else %}
        RESPOND PREFIX="info" MSG="‚ö†Ô∏è Skipping chamber cooldown ‚Äî filament type '{material}' not in allowed list."
    {% endif %}


